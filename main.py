import os
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv
from src.affiliate import setup_affiliate, schedule_content_generation
from src.scheduler import continuous_scheduler
from src.analytics import get_dashboard_data

load_dotenv("config.env")

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

@app.on_event("startup")
def startup_event():
    setup_affiliate()
    continuous_scheduler()

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard():
    data = get_dashboard_data()
    return f"""
    <html><head><title>Analytics Dashboard</title></head>
    <body style='font-family:sans-serif;'>
        <h1>Autom8Deals Analytics Dashboard</h1>
        <p>{data['message']}</p>
        <hr>
        <p>This dashboard will soon show your clicks, conversions, and top-performing products!</p>
    </body></html>
    """

@app.get("/")
def root():
    return RedirectResponse(url="/dashboard")

@app.get("/search", response_class=HTMLResponse)
def search(request: Request):
    query = request.query_params.get("q", "").strip()
    static_dir = os.path.join(os.path.dirname(__file__), "static")
    results = search_articles(query, static_dir) if query else []
    html = """
    <!DOCTYPE html>
    <html lang='en'>
    <head>
        <meta charset='UTF-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <title>Search Results - Autom8Deals</title>
        <link rel='stylesheet' href='/static/site.css'>
        <link href='https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap' rel='stylesheet'>
    </head>
    <body>
        <header>
            <a href='/' style='display:inline-block;'><img src='/static/logo.png' alt='Autom8Deals Logo' class='logo'></a>
            <nav>
                <a href='/'>Home</a>
                <a href='#about'>About</a>
                <a href='#contact'>Contact</a>
            </nav>
        </header>
        <div class='container'>
            <h1>Search Results</h1>
            <form action='/search' method='get' style='text-align:center;margin-bottom:28px;'>
                <input type='text' name='q' placeholder='Search for products or niches...' value='""" + query.replace("'", "&#39;") + """' style='width:65%;max-width:360px;padding:10px 14px;border-radius:6px;border:1px solid #ccc;font-size:17px;'>
                <button type='submit' class='cta-button'>Search</button>
            </form>
    """
    if query:
        if results:
            html += f"<p>Found {len(results)} result(s) for '<b>{query}</b>':</p><ul>"
            for r in results:
                html += f"<li><a href='{r['url']}'>{r['product']} <span style='color:#888;font-size:15px;'>({r['niche']})</span></a></li>"
            html += "</ul>"
        else:
            html += f"<p>No results found for '<b>{query}</b>'.</p>"
    else:
        html += "<p>Enter a search term above to find products or niches.</p>"
    html += """
        </div>
        <footer style='text-align:center;color:#888;font-size:14px;margin:36px 0 18px 0;'>
            Affiliate content generated by Autom8Deals. Updated automatically.<br>
            &copy; 2025 Autom8Deals. All rights reserved.
        </footer>
    </body>
    </html>
    """
    return HTMLResponse(content=html)

# To run your automated affiliate engine 24/7, just run this script:
# python main.py
# Leave your computer/server on and it will keep generating and updating content.

import os
import subprocess
import time

_DEPLOY_SCRIPT = os.path.abspath(os.path.join(os.path.dirname(__file__), 'deploy_netlify.bat'))

# Launch deploy script in a new cmd window (if not already running)
def launch_deploy_cmd():
    # Check if a deploy window is already running (simple check by window title)
    # This is a naive check; for more robust control, use a lock file or psutil.
    try:
        import psutil
        for proc in psutil.process_iter(['name', 'cmdline']):
            if proc.info['name'] and 'cmd.exe' in proc.info['name'].lower():
                if proc.info['cmdline'] and 'deploy_netlify.bat' in ' '.join(proc.info['cmdline']):
                    print('[Deploy] Deploy window already running.')
                    return
    except ImportError:
        pass  # psutil not installed, skip check
    # print('[Deploy] Launching deploy_netlify.bat in a new cmd window...')
    # subprocess.Popen([
    #     'cmd.exe', '/c', 'start', '', _DEPLOY_SCRIPT
    # ], creationflags=subprocess.CREATE_NEW_CONSOLE)


if __name__ == "__main__":
    launch_deploy_cmd()
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000)
